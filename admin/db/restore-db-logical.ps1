<#PSScriptInfo
.VERSION 1.0.0
.GUID b6b17e02-ecb1-4780-afbc-2128026b7464
.AUTHOR Synopsys
#>

<# 
.DESCRIPTION 
This script automates the process of restoring the MariaDB master database with
a logical backup generated by mysqldump:

mysqldump --host=127.0.0.1 --port=3306 --user=root -p codedx > /bitnami/mariadb/dump-codedx.sql

Note: This does not work with a physical backup generated with mariabackup.
#>

param (
	[string] $backupToRestore, # logical backup file
	[string] $rootPwd,
	[string] $replicationPwd,
	[string] $namespace = 'srm',
	[string] $releaseName = 'srm',
	[int]    $waitSeconds = 600,
	[switch] $skipWebRestart
)

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

Set-PSDebug -Strict

$global:PSNativeCommandArgumentPassing='Legacy'

'../../.install-guided-setup-module.ps1' | ForEach-Object {
	$path = join-path $PSScriptRoot $_
	if (-not (Test-Path $path)) {
		Write-Error "Unable to find file script dependency at $path. Please download the entire GitHub repository and rerun the downloaded copy of this script."
	}
	. $path
}

if (-not (Test-HelmRelease $namespace $releaseName)) {
	Write-Error "Unable to find Helm release named $releaseName in namespace $namespace."
}

$deploymentSRM = "$(Get-HelmChartFullname $releaseName 'srm')-web"
$statefulSetMariaDBMaster = "$releaseName-mariadb-master"
$statefulSetMariaDBSlave = "$releaseName-mariadb-slave"

$statefulSetMariaDBSlaveCount = (Get-HelmValues $namespace $releaseName).mariadb.slave.replicas
if ($statefulSetMariaDBSlaveCount -eq 0) {
	$statefulSetMariaDBMaster = "$releaseName-mariadb"
	$statefulSetMariaDBSlave = ''
}

$mariaDbSecretName = "$releaseName-db-cred-secret"
$mariaDbMasterServiceName = "$releaseName-mariadb"

if (-not (Test-Deployment $namespace $deploymentSRM)) {
	Write-Error "Unable to find Deployment named $deploymentSRM in namespace $namespace."
}

if (-not (Test-StatefulSet $namespace $statefulSetMariaDBMaster)) {
	Write-Error "Unable to find StatefulSet named $statefulSetMariaDBMaster in namespace $namespace."
}

if ($statefulSetMariaDBSlaveCount -ne 0 -and (-not (Test-StatefulSet $namespace $statefulSetMariaDBSlave))) {
	Write-Error "Unable to find StatefulSet named $statefulSetMariaDBSlave in namespace $namespace."
}

if (-not (Test-Secret $namespace $mariaDbSecretName)) {
	# it could be a default DB resource
	Write-Error "Unable to find Secret named $mariaDbSecretName in namespace $namespace."
}

if (-not (Test-Service $namespace $mariaDbMasterServiceName)) {
	Write-Error "Unable to find Service named $mariaDbMasterServiceName in namespace $namespace."
}

$mariaDBServiceAccount = Get-ServiceAccountName $namespace 'statefulset' $statefulSetMariaDBMaster

Write-Host @"

Using the following configuration:

SRM Deployment Name: $deploymentSRM
MariaDB Master StatefulSet Name: $statefulSetMariaDBMaster
MariaDB Slave StatefulSet Name: $statefulSetMariaDBSlave
MariaDB Slave Replica Count: $statefulSetMariaDBSlaveCount
MariaDB Secret Name: $mariaDbSecretName
MariaDB Master Service Name: $mariaDbMasterServiceName
MariaDB Service Account: $mariaDBServiceAccount
"@

if ($backupToRestore -eq '') { 
	$backupToRestore = Read-HostText 'Enter the db backup to restore (backup.sql)' 1 
}

if (-not (Test-Path $backupToRestore -PathType Leaf)) {
	Write-Error "The '$backupToRestore' file does not exist."
}
if (-not ([io.path]::GetExtension($backupToRestore) -eq '.sql')) {
	Write-Error "The '$backupToRestore' file does not have a .sql file extensions."
}
if ($backupToRestore.Contains(":")) {
	Write-Error "Unable to continue because the '$backupToRestore' path contains a colon that will disrupt a required kubectl cp command - specify an alternate, relative path instead."
}

if ($rootPwd -eq '') { 
	$rootPwd = Read-HostSecureText 'Enter the password for the MariaDB root user' 1 
}

if ($replicationPwd -eq '') {
	$replicationPwd = Read-HostSecureText 'Enter the password for the MariaDB replication user' 1 
}

Write-Verbose 'Restarting database...'
& (join-path $PSScriptRoot 'restart-db.ps1') -namespace $namespace -releaseName $releaseName -waitSeconds $waitSeconds -skipWebRestart

Write-Verbose 'Searching for MariaDB slave pods...'
$podFullNamesSlaves = kubectl -n $namespace get pod -l component=slave -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to fetch slave pods, kubectl exited with exit code $LASTEXITCODE."
}

$podNamesSlaves = @()
$podFullNamesSlaves | ForEach-Object {

	$podName = $_ -replace 'pod/',''
	$podNamesSlaves = $podNamesSlaves + $podName
}

Write-Verbose 'Searching for SRM pods...'
$podName = kubectl -n $namespace get pod -l component=web -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to find SRM pod, kubectl exited with exit code $LASTEXITCODE."
}
$podName = $podName -replace 'pod/',''

Write-Verbose 'Searching for MariaDB master pod...'
$podNameMaster = kubectl -n $namespace get pod -l component=master -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to find MariaDB master pod, kubectl exited with exit code $LASTEXITCODE."
}

if ([string]::IsNullOrEmpty($podNameMaster)) {
	Write-Error "Unable to find primary database pod. Is it running?"
}
$podNameMaster = $podNameMaster -replace 'pod/',''

Write-Verbose "Stopping SRM deployment named $deploymentSRM..."
Set-DeploymentReplicas  $namespace $deploymentSRM 0 $waitSeconds

Write-Verbose 'Stopping slave database instances...'
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Stopping slave named $_..."
	Stop-SlaveDB $namespace $_ 'mariadb' $rootPwd
}

Write-Verbose "Restoring database backup on pod $podNameMaster..."
New-Database $namespace $podNameMaster 'mariadb' $rootPwd 'codedx' $backupToRestore
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Restoring database backup on pod $_..."
	New-Database $namespace $_ 'mariadb' $rootPwd 'codedx' $backupToRestore
}

Write-Verbose "Starting $statefulSetMariaDBMaster statefulset replica..."
Set-StatefulSetReplicas $namespace $statefulSetMariaDBMaster 1 $waitSeconds

if ($statefulSetMariaDBSlaveCount -ne 0) {

	Write-Verbose "Starting $statefulSetMariaDBSlave statefulset replica(s)..."
	Set-StatefulSetReplicas $namespace $statefulSetMariaDBSlave $statefulSetMariaDBSlaveCount $waitSeconds

	Write-Verbose 'Resetting master database...'
	$filePos = Get-MasterFilePosAfterReset $namespace 'mariadb' $podNameMaster $rootPwd

	Write-Verbose 'Connecting slave database(s)...'
	$podNamesSlaves | ForEach-Object {
		Write-Verbose "Restoring slave database pod $_..."
		Stop-SlaveDB $namespace $_ 'mariadb' $rootPwd
		Start-SlaveDB $namespace $_ 'mariadb' 'replicator' $replicationPwd $rootPwd $mariaDbMasterServiceName $filePos
	}
}

if ($skipWebRestart) {
	Write-Verbose "Skipping SRM Restart..."
	Write-Verbose " To restart SRM, run: kubectl -n $namespace scale --replicas=1 deployment/$deploymentSRM"
} else {
	Write-Verbose "Starting SRM deployment named $deploymentSRM..."
	Set-DeploymentReplicas  $namespace $deploymentSRM 1 $waitSeconds
}

Write-Host 'Done'
